Why can we not use "electron ." from the command line?

  - Electron is unfortunately not a part of the developer tools program for Apple.
  This means that we cannot run electron by itself and we must run it through npm (npm run electron-dev, where
  electron-dev is an alias for electron . within the npm shell)

How is this project setup? What is are the main components that make up this project?

  - This project has three main portions

    * Flask

      ^ For having an ML backend to do ML stuff and other pythonic things

    * Electron

      ^ For having the application be a desktop application rather than a browser application

    * React

      ^ For having react components within the Electron desktop application 

What is the benefit of having React vs. no React?

  - We want to be able to load more than just HTML dynamicallly. We want react components that 
  can make function calls and have more functionality (such as a dynamically generated list)
  than a HTML page.

    * Otherwise, we have to hack our way by modifying jinja in Python and sending HTML through Flask sporadically.

What is public/main.js?

  - This file in the src is for piping everything that the react application on port XXXX sends into the
  electron desktop application.

How does the search page work in

What is the process of getting a link added, analyzed and retrieved?
  - Adding a link
    * User enters information in on the Links icon.
    * Validation for missing fields that the user needs to update.
    * Sends the link to the database and saves the analyzed link.
    * Assert that the link is complete and insert into db.
  - Analyzed
    * Use Flask backend to analyze the title and the text of the file
      ^ Use ml (sent bert) to encode the title+text.
    * Send back the title, text, and vector.
  - Retrieved
    * Query database in react and get the link data.

What are we using for reference to get started with the SQL queries?
  - https://flask-sqlalchemy.palletsprojects.com/en/2.x/quickstart/#a-minimal-application

Why is the screenshot uploading so tricky?

  - There are a few quirks and rigid rules to the image sending and uploading process:

    * Accessing a field that does not exist in Flask will automatically create a 
    400 response and throw an error of BadRequest.

    * You cannot get the original path of an uploaded file in javascript. This means you cant send it either.

    * You must send the content of the formdata using an automatically configured header for content-type.

      ^ Doing it myself usually ended up in some sort of error.

    * Messing up the content type or the request will result in Flask reading a blank object with nothing in it.


How do we handle multi-file uploads?
  
  - We can allow multiple file inputs.

How do we handle the image access issues from javascript?
  - As soon as we get access to the image in Python, we allow the backend server to save and 
  send out that Screenshot-ID matching file data as a binary object.

