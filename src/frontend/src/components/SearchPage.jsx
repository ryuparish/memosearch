import React, { useContext } from 'react';
import {AppContext} from "../App";

export default function SearchPage() {
  const {
    setPage,
    searchQuery,
    setSearchQuery,
    searchResults,
    setSearchResults,
    searchNote,
    setSearchNote,
    searchScreenshot,
    setSearchScreenshot,
    searchLink,
    setSearchLink,
  } = useContext(AppContext);

  let result_list = [];

  // Handle when the search button is clicked
  function handleSearch(event) {
    event.preventDefault()
    let content =  []
    
    // Adding content types
    if (searchNote) {
      content.push("notes")
    }
    if (searchScreenshot) {
      content.push("screenshots")
    }
    if (searchLink) {
      content.push("links")
    }

    fetch("http://127.0.0.1:4444/search", {
      method: "POST",
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*',
      },
      body: JSON.stringify({"search": searchQuery, "content": content})
    })
      .then((response) => {
        return response.json();
      })
      .then((data) => {
        // Logic for finding the type then displaying correctly in link list
        for (const key in data) {
          // Looping through the ENUMERATION generated by the list in this for-loop
          for (let obj in data[key]) {
            result_list.push(<li><text>{'[' + key.toUpperCase() +']'}</text><a>{data[key][obj]["link"]}</a></li>)
          }
        }
        setSearchResults(result_list);
      })
        .catch((error) => console.log(error));
  }
  
  return (
    <div>
      <head>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css"/>
        <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
      </head>
      <body>
        <br/>
        <div class="container">
          <button class="btn btn-info" onClick={() => setPage("main")}>Back</button>
          <div class="jumbotron">
            <h1>Search</h1>
            <h2>Search for links, screenshots, and notes.</h2>
          </div>
          <br/>
          <form onSubmit={handleSearch}>
            <h3> Add Link </h3>
            <input type="text" value={searchQuery} onChange={(e) => setSearchQuery(e.target_value)}/>
            <input type="submit" value="Search" id="search"/>
            <fieldset>
              <legend>Filter the content you want:</legend>
              <div>
                <input type="checkbox" id="notes" name="notes" checked={searchNote} onChange={() => setSearchNote(!searchNote)}/>
                <label for="notes">Notes</label>
              </div>
              <div>
                <input type="checkbox" id="screenshots" name="screenshots" checked={searchScreenshot} onChange={() => setSearchScreenshot(!searchScreenshot)}/>
                <label for="screenshots">Screenshots</label>
              </div>
              <div>
                <input type="checkbox" id="links" name="links" checked={searchLink} onChange={() => setSearchLink(!searchLink)}/>
                <label for="links">Links</label>
              </div>
            </fieldset>
          </form>
          <h4><a>Results:</a></h4>
          <div class="slider" >
            <ul>
              {searchResults}
            </ul>
          </div>
        </div>
      </body>
    </div>
  )}
